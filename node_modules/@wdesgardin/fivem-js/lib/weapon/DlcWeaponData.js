"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DlcWeaponData = void 0;
const utils_1 = require("../utils");
/**
 * DlcWeaponData - Mapping of WeaponHash -> DlcWeaponData
 */
exports.DlcWeaponData = new Map();
/**
 * Initialize DlcWeaponData, avoid calling expansive native repeatedly
 *
 */
function initializeOnce() {
    let isInitialized = false;
    return function () {
        if (isInitialized) {
            return;
        }
        // magic number based on struct DlcWeaponData
        const intLength = 4;
        const strLength = 64;
        const weaponCount = GetNumDlcWeapons();
        for (let i = 0; i < weaponCount; i++) {
            const buffer = new Uint8Array(14 * intLength + 4 * strLength);
            // https://docs.fivem.net/natives/?_0x79923CD21BECE14E
            Citizen.invokeNative('0x79923CD21BECE14E', i, buffer, Citizen.returnResultAnyway());
            // noinspection PointlessArithmeticExpressionJS
            const dlcWeaponData = {
                validCheck: (0, utils_1.getUInt32FromUint8Array)(buffer, 0 * intLength, 1 * intLength),
                weaponHash: (0, utils_1.getUInt32FromUint8Array)(buffer, 2 * intLength, 3 * intLength),
                unk: (0, utils_1.getUInt32FromUint8Array)(buffer, 4 * intLength, 5 * intLength),
                weaponCost: (0, utils_1.getUInt32FromUint8Array)(buffer, 6 * intLength, 7 * intLength),
                ammoCost: (0, utils_1.getUInt32FromUint8Array)(buffer, 8 * intLength, 9 * intLength),
                ammoType: (0, utils_1.getUInt32FromUint8Array)(buffer, 10 * intLength, 11 * intLength),
                defaultClipSize: (0, utils_1.getUInt32FromUint8Array)(buffer, 12 * intLength, 13 * intLength),
                name: (0, utils_1.getStringFromUInt8Array)(buffer, 14 * intLength, 14 * intLength + strLength),
                desc: (0, utils_1.getStringFromUInt8Array)(buffer, 14 * intLength + strLength, 14 * intLength + 2 * strLength),
                simpleDesc: (0, utils_1.getStringFromUInt8Array)(buffer, 14 * intLength + 2 * strLength, 14 * intLength + 3 * strLength),
                upperCaseName: (0, utils_1.getStringFromUInt8Array)(buffer, 14 * intLength + 3 * strLength, 14 * intLength + 4 * strLength),
            };
            exports.DlcWeaponData.set(dlcWeaponData.weaponHash, dlcWeaponData);
        }
        isInitialized = true;
    };
}
if ((0, utils_1.IsClient)())
    initializeOnce()();
