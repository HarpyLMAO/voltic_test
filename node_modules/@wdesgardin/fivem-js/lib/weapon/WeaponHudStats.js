"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeaponHudStats = void 0;
const hashes_1 = require("../hashes");
const utils_1 = require("../utils");
/**
 * Mapping of WeaponHash -> WeaponHudStats
 *
 */
exports.WeaponHudStats = new Map();
/**
 * Initialize WeaponHudStats, avoid calling expansive native repeatedly
 *
 */
function initializeOnce() {
    let isInitialized = false;
    return function () {
        if (isInitialized) {
            return;
        }
        // magic number based on struct WeaponHudStats
        const intLength = 4;
        for (const hash of (0, utils_1.enumValues)(hashes_1.WeaponHash)) {
            const buffer = new Uint8Array(0x28);
            // https://docs.fivem.net/natives/?_0xD92C739EE34C9EBA
            Citizen.invokeNative('0xD92C739EE34C9EBA', hash, buffer, Citizen.returnResultAnyway());
            // noinspection PointlessArithmeticExpressionJS
            const weaponHudStats = {
                hudDamage: (0, utils_1.getUInt32FromUint8Array)(buffer, 0 * intLength, 1 * intLength),
                hudSpeed: (0, utils_1.getUInt32FromUint8Array)(buffer, 2 * intLength, 3 * intLength),
                hudCapacity: (0, utils_1.getUInt32FromUint8Array)(buffer, 4 * intLength, 5 * intLength),
                hudAccuracy: (0, utils_1.getUInt32FromUint8Array)(buffer, 6 * intLength, 7 * intLength),
                hudRange: (0, utils_1.getUInt32FromUint8Array)(buffer, 8 * intLength, 9 * intLength),
            };
            exports.WeaponHudStats.set(hash, weaponHudStats);
        }
        isInitialized = true;
    };
}
if ((0, utils_1.IsClient)())
    initializeOnce()();
