"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeaponComponent = void 0;
const WeaponComponentHash_1 = require("./WeaponComponentHash");
const ComponentAttachmentPoint_1 = require("./ComponentAttachmentPoint");
const Game_1 = require("../Game");
const ComponentDisplayNameByHash_1 = require("./ComponentDisplayNameByHash");
const WeaponComponentHashesByWeaponHash_1 = require("./WeaponComponentHashesByWeaponHash");
const ComponentAttachmentPointByHash_1 = require("./ComponentAttachmentPointByHash");
const WeaponComponentHudStats_1 = require("./WeaponComponentHudStats");
/**
 * ped weapon component on weapon
 *
 */
class WeaponComponent {
    constructor(owner, weapon, componentHash) {
        this.owner = owner;
        this.weapon = weapon;
        this.componentHash = componentHash;
    }
    /**
     * Check WeaponComponent is invalid or not
     *
     * @constructor
     */
    get IsInvalid() {
        return this.componentHash === WeaponComponentHash_1.WeaponComponentHash.Invalid;
    }
    /**
     * get component hash
     *
     * @constructor
     */
    get ComponentHash() {
        return this.componentHash;
    }
    /**
     * check ped has weapon component
     *
     * @constructor
     */
    get Active() {
        return HasPedGotWeaponComponent(this.owner.Handle, this.weapon.Hash, this.componentHash);
    }
    /**
     * give weapon component to ped
     *
     * @param value
     * @constructor
     */
    set Active(value) {
        if (value) {
            GiveWeaponComponentToPed(this.owner.Handle, this.weapon.Hash, this.componentHash);
        }
        else {
            RemoveWeaponComponentFromPed(this.owner.Handle, this.weapon.Hash, this.componentHash);
        }
    }
    /**
     * get component display name / label
     *
     * @constructor
     */
    get DisplayName() {
        return WeaponComponent.getComponentDisplayNameFromHash(this.weapon.Hash, this.componentHash);
    }
    /**
     * get component localized name
     *
     * @constructor
     */
    get LocalizedName() {
        return Game_1.Game.getGXTEntry(this.DisplayName);
    }
    /**
     * get component attachment point
     *
     * @constructor
     */
    get AttachmentPoint() {
        return WeaponComponent.getAttachmentPoint(this.weapon.Hash, this.componentHash);
    }
    /**
     * get component hud stats
     *
     * @constructor
     */
    get HudStats() {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return WeaponComponentHudStats_1.WeaponComponentHudStats.get(this.componentHash);
    }
    /**
     * get component display name / label by hash
     *
     * @param hash
     * @param componentHash
     * @constructor
     */
    static getComponentDisplayNameFromHash(hash, componentHash) {
        var _a;
        if (!hash) {
            return 'WCT_INVALID';
        }
        return (_a = ComponentDisplayNameByHash_1.ComponentDisplayNameByHash.get(componentHash)) !== null && _a !== void 0 ? _a : 'WCT_INVALID';
    }
    /**
     * get component attachment point by WeaponHash and WeaponComponentHash
     *
     * @param weaponHash
     * @param componentHash
     * @constructor
     */
    static getAttachmentPoint(weaponHash, componentHash) {
        var _a;
        const componentHashes = WeaponComponentHashesByWeaponHash_1.WeaponComponentHashesByWeaponHash.get(weaponHash);
        if (!componentHashes) {
            return ComponentAttachmentPoint_1.ComponentAttachmentPoint.Invalid;
        }
        if (componentHashes.every(x => x !== componentHash)) {
            return ComponentAttachmentPoint_1.ComponentAttachmentPoint.Invalid;
        }
        return (_a = ComponentAttachmentPointByHash_1.ComponentAttachmentPointByHash.get(componentHash)) !== null && _a !== void 0 ? _a : ComponentAttachmentPoint_1.ComponentAttachmentPoint.Invalid;
    }
}
exports.WeaponComponent = WeaponComponent;
