"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DlcWeaponComponentData = void 0;
const utils_1 = require("../utils");
/**
 * DlcWeaponComponentData
 *
 */
exports.DlcWeaponComponentData = new Map();
/**
 * Initialize DlcWeaponComponentData, avoid calling expansive native repeatedly
 *
 */
function initializeOnce() {
    let isInitialized = false;
    return function () {
        if (isInitialized) {
            return;
        }
        // magic number based on struct DlcWeaponData
        const intLength = 4;
        const strLength = 64;
        const weaponCount = GetNumDlcWeapons();
        for (let i = 0; i < weaponCount; i++) {
            const componentCount = GetNumDlcWeaponComponents(i);
            for (let j = 0; j < componentCount; j++) {
                const buffer = new Uint8Array(14 * intLength + 4 * strLength);
                // https://docs.fivem.net/natives/?_0x6CF598A2957C2BF8
                Citizen.invokeNative('0x6CF598A2957C2BF8', i, j, buffer, Citizen.returnResultAnyway());
                // noinspection PointlessArithmeticExpressionJS
                const dlcWeaponComponentData = {
                    attachBone: (0, utils_1.getUInt32FromUint8Array)(buffer, 0 * intLength, 1 * intLength),
                    bActiveByDefault: (0, utils_1.getUInt32FromUint8Array)(buffer, 2 * intLength, 3 * intLength),
                    unk: (0, utils_1.getUInt32FromUint8Array)(buffer, 4 * intLength, 5 * intLength),
                    componentHash: (0, utils_1.getUInt32FromUint8Array)(buffer, 6 * intLength, 7 * intLength),
                    unk2: (0, utils_1.getUInt32FromUint8Array)(buffer, 8 * intLength, 9 * intLength),
                    componentCost: (0, utils_1.getUInt32FromUint8Array)(buffer, 10 * intLength, 11 * intLength),
                    name: (0, utils_1.getStringFromUInt8Array)(buffer, 12 * intLength, 12 * intLength + strLength),
                    desc: (0, utils_1.getStringFromUInt8Array)(buffer, 12 * intLength + strLength, 12 * intLength + 2 * strLength),
                };
                exports.DlcWeaponComponentData.set(dlcWeaponComponentData.componentHash, dlcWeaponComponentData);
            }
        }
        isInitialized = true;
    };
}
if ((0, utils_1.IsClient)())
    initializeOnce()();
